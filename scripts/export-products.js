// // 1) npm i firebase-admin
// // 2) .env: FIREBASE_ADMIN_SA_JSON='{"type":"service_account",...}' (service account JSON)
// // Run: ts-node scripts/export-products.ts  (yoki node bilan js variant)

// import { initializeApp, cert } from "firebase-admin/app";
// import { getFirestore } from "firebase-admin/firestore";
// import * as fs from "fs";
// import { translateProductTitle } from "../src/lib/titleTranslate.js";
// import { titleKey } from "../src/lib/titleKey.js";

// initializeApp({
//   credential: cert(JSON.parse(process.env.FIREBASE_ADMIN_SA_JSON!)),
// });
// const db = getFirestore();

// type ItemOut = {
//   id: string;
//   sectionId: string;
//   categoryId: string;
//   sizeId?: string;
//   title: string;
//   title_uz?: string;       // heuristika bilan to‘ldiramiz
//   description?: string;
//   price?: string | number;
//   image?: string;
//   available?: boolean;
// };

// async function exportAll() {
//   const out: ItemOut[] = [];
//   const mapUZ: Record<string, string> = {}; // product-titles.uz.ts uchun tayyor

//   const secSnap = await db.collection("products").get();
//   for (const sec of secSnap.docs) {
//     const sectionId = sec.id;

//     const catSnap = await sec.ref.collection("categories").get();
//     for (const cat of catSnap.docs) {
//       const categoryId = cat.id;

//       // 1) sizes/*/items
//       const sizesSnap = await cat.ref.collection("sizes").get();
//       for (const sz of sizesSnap.docs) {
//         const sizeId = sz.id;
//         const itemsSnap = await sz.ref.collection("items").get();
//         for (const it of itemsSnap.docs) {
//           const d = it.data() as any;
//           const o: ItemOut = {
//             id: it.id,
//             sectionId, categoryId, sizeId,
//             title: d.title || "",
//             description: d.description || "",
//             price: d.price, image: d.image, available: d.available ?? true
//           };

//           // Hech narsani buzmasdan UZ heuristik tarjima (ko‘rsatish uchun)
//           const heurUz = translateProductTitle(o.title, "uz");
//           const key = titleKey(o.title);
//           mapUZ[key] = mapUZ[key] || heurUz;

//           o.title_uz = heurUz;
//           out.push(o);
//         }
//       }

//       // 2) categories/{cat}/items
//       const itemsSnap = await cat.ref.collection("items").get();
//       for (const it of itemsSnap.docs) {
//         const d = it.data() as any;
//         const o: ItemOut = {
//           id: it.id,
//           sectionId, categoryId,
//           title: d.title || "",
//           description: d.description || "",
//           price: d.price, image: d.image, available: d.available ?? true
//         };

//         const heurUz = translateProductTitle(o.title, "uz");
//         const key = titleKey(o.title);
//         mapUZ[key] = mapUZ[key] || heurUz;

//         o.title_uz = heurUz;
//         out.push(o);
//       }
//     }
//   }

//   fs.writeFileSync("./exports/products.json", JSON.stringify(out, null, 2), "utf-8");

//   // product-titles.uz.ts shabloni
//   const lines = [
//     "// AUTOGENERATED skeleton — zarur bo‘lsa qiymatlarni qo‘lda tozalang",
//     "export const PRODUCT_TITLES_UZ: Record<string, string> = {",
//     ...Object.entries(mapUZ).sort().map(([k, v]) => `  "${k}": ${JSON.stringify(v)},`),
//     "};",
//     "export default PRODUCT_TITLES_UZ;",
//   ];
//   fs.mkdirSync("./exports", { recursive: true });
//   fs.writeFileSync("./exports/product-titles.uz.ts", lines.join("\n"), "utf-8");

//   console.log(`OK. ${out.length} ta item eksport qilindi: exports/products.json`);
//   console.log(`Lug‘at shabloni: exports/product-titles.uz.ts`);
// }

// exportAll().catch(e => { console.error(e); process.exit(1); });

/////////////////////////////////////////////// .ts code ↑ /////////////////////////////////////////////////////////////

// scripts/export-products.js
/* eslint-disable @typescript-eslint/no-require-imports */
const fs = require("fs");
const { initializeApp, cert } = require("firebase-admin/app");
const { getFirestore } = require("firebase-admin/firestore");

/** ───── Credentials: ENV → argv → default path ───── */
let credentialsJson = null;

// 1) Avval ENV bo'lsa, urinamiz (lekin xato bo'lsa e'tiborsiz qoldiramiz)
if (process.env.FIREBASE_ADMIN_SA_JSON) {
  try {
    credentialsJson = JSON.parse(process.env.FIREBASE_ADMIN_SA_JSON);
  } catch (e) {
    console.warn("⚠️  FIREBASE_ADMIN_SA_JSON ni JSON sifatida o'qib bo'lmadi, fayldan o‘qiyman.");
  }
}

// 2) Agar ENV ishlamasa, argv[2] (yo‘l) → yoki default: ./scripts/service-account.json
if (!credentialsJson) {
  const path = process.argv[2] || "./scripts/service-account.json";
  try {
    const raw = fs.readFileSync(path, "utf-8");
    credentialsJson = JSON.parse(raw);
  } catch (e) {
    console.error("❌ Service account faylini o‘qib bo‘lmadi.\nPath:", path, "\nXato:", e.message);
    process.exit(1);
  }
}

// 3) Firebase Admin init
initializeApp({ credential: cert(credentialsJson) });
const db = getFirestore();

/** ---------- ENG YENGIL TRANSLIT + HEURISTIKA ---------- */
function titleKey(src) {
  const map = {
    "ё":"yo","й":"y","ц":"ts","у":"u","к":"k","е":"e","н":"n","г":"g","ш":"sh","щ":"shch",
    "з":"z","х":"h","ъ":"","ф":"f","ы":"y","в":"v","а":"a","п":"p","р":"r","о":"o","л":"l",
    "д":"d","ж":"zh","э":"e","я":"ya","ч":"ch","с":"s","м":"m","и":"i","т":"t","ь":"",
    "б":"b","ю":"yu"
  };
  const lower = String(src || "").toLowerCase();
  const translit = lower.replace(/[а-яё]+/g, ch =>
    ch.split("").map(c => map[c] ?? c).join("")
  );
  return translit
    .replace(/[.,;:()[\]{}'"“”‘’]/g, " ")
    .replace(/[×]/g, "x")
    .replace(/\s+/g, " ")
    .trim()
    .replace(/[^a-z0-9\s\-_/]/g, "")
    .replace(/\s+/g, "-");
}

function translateProductTitleRUtoUZ(title) {
  if (!title) return "";
  const EXACT = {
    "ПВХ повышенной плотности 0,35": "PVX yuqori zichlikda 0,35",
    "ПВХ стандартной плотности 0,40": "PVX standart zichlikda 0,40",
  };
  if (EXACT[title]) return EXACT[title];

  const rules = [
    [/ПВХ/gi, "PVX"],
    [/Оргстекло/gi, "Orgsteklo"],
    [/Акрил/gi, "Akryl"],
    [/Роумарк/gi, "Roumark"],
    [/Алюкобонд/gi, "Alukobond"],
    [/Пенокартон/gi, "Penokarton"],
    [/повышенной плотности/gi, "yuqori zichlikda"],
    [/стандартной плотности/gi, "standart zichlikda"],
    [/лист(?![а-я])/gi, "list"],
    [/белый/gi, "oq"],
    [/прозрачн(ый|ая|ое|ые)/gi, "shaffof"],
    [/(^|\s)мм(\s|$)/gi, " mm "],
    [/(^|\s)м(\s|$)/gi, " m "],
    [/[×x]/g, " x "],
  ];
  let out = title;
  for (const [re, to] of rules) out = out.replace(re, to);
  return out.replace(/\s+/g, " ").replace(/\s,\s/g, ", ").trim();
}

/** ---------- EXPORT MAIN ---------- */
async function exportAll() {
  const out = [];
  const mapUZ = {}; // key -> UZ (lug‘at shabloni)

  const secSnap = await db.collection("products").get();
  for (const sec of secSnap.docs) {
    const sectionId = sec.id;
    const catSnap = await sec.ref.collection("categories").get();

    for (const cat of catSnap.docs) {
      const categoryId = cat.id;

      // sizes/*/items
      const sizesSnap = await cat.ref.collection("sizes").get();
      for (const sz of sizesSnap.docs) {
        const sizeId = sz.id;
        const itemsSnap = await sz.ref.collection("items").get();
        for (const it of itemsSnap.docs) {
          const d = it.data() || {};
          const title = d.title || "";
          const uz = translateProductTitleRUtoUZ(title);
          const key = titleKey(title);
          if (!mapUZ[key]) mapUZ[key] = uz;

          out.push({
            id: it.id,
            sectionId,
            categoryId,
            sizeId,
            title,
            title_uz: uz,                // heuristika
            description: d.description || "",
            price: d.price,
            image: d.image,
            available: d.available ?? true,
          });
        }
      }

      // categories/{cat}/items
      const itemsSnap = await cat.ref.collection("items").get();
      for (const it of itemsSnap.docs) {
        const d = it.data() || {};
        const title = d.title || "";
        const uz = translateProductTitleRUtoUZ(title);
        const key = titleKey(title);
        if (!mapUZ[key]) mapUZ[key] = uz;

        out.push({
          id: it.id,
          sectionId,
          categoryId,
          title,
          title_uz: uz,
          description: d.description || "",
          price: d.price,
          image: d.image,
          available: d.available ?? true,
        });
      }
    }
  }

  fs.mkdirSync("./exports", { recursive: true });
  fs.writeFileSync("./exports/products.json", JSON.stringify(out, null, 2), "utf-8");

  const lines = [
    "// AUTOGENERATED — kerak bo'lsa qiymatlarni qo'lda tozalang",
    "export const PRODUCT_TITLES_UZ = {",
    ...Object.entries(mapUZ).sort((a,b)=>a[0].localeCompare(b[0])).map(([k, v]) => `  "${k}": ${JSON.stringify(v)},`),
    "};",
    "export default PRODUCT_TITLES_UZ;",
  ];
  fs.writeFileSync("./exports/product-titles.uz.ts", lines.join("\n"), "utf-8");

  console.log(`✅ Eksport tayyor. ${out.length} ta item: exports/products.json`);
  console.log(`✅ Lug‘at shabloni: exports/product-titles.uz.ts`);
}

exportAll().catch(e => {
  console.error("Export xatosi:", e);
  process.exit(1);
});
